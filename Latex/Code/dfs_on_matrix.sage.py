

# This file was *autogenerated* from the file dfs_on_matrix.sage
from sage.all_cmdline import *   # import sage library

_sage_const_50 = Integer(50); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_22 = Integer(22)
M=random_matrix(ZZ,_sage_const_50 ,_sage_const_50 )
M=M.apply_map(lambda x : x % _sage_const_2 )
matrix_plot(M).show()

def adjacency_factory(M):
    def adj(e):
        i,j=e
        return [(s,t) for s,t in [(i-_sage_const_1 ,j),(i+_sage_const_1 ,j),(i,j-_sage_const_1 ),(i,j+_sage_const_1 )] if _sage_const_0 <=s and s<M.nrows() and _sage_const_0 <=t and t<M.ncols() and M[s,t]==M[i,j]]
    return adj


adj=adjacency_factory(M)

def dfs(adj,u,found):
    found.append(u)
    for v in adj(u):
        if v not in found:
            dfs(adj,v,found)

found=[]
dfs(adj,(_sage_const_22 ,_sage_const_22 ),found)

for v in found:
    M[v]=_sage_const_2 

matrix_plot(M).show()

